---
layout: post
title: "理解Interator"
date: 2016-04-10 20:46:16 +800
categories: es6
---
Javascript 原有的表示 “集合” 的数据结构，主要是数组(Array)和对象(Object)，加上es6中加入的 Map 和 Set，一共是4中数据集合。<br>
Iterator(遍历器)是一种接口，为各种不同的数据集合提供统一的访问机制，任何数据结构，只要部署Iterator接口，就可以进行遍历操作。其功能有3个：

* 为各种数据结构提供统一的，简便的访问接口
* 使得数据结构的内部成员能够按某种次序排列
* 服务 for ... of 循环

Iterator的遍历过程如下：

1. 创建一个指针对象，指向当前数据结构的起始位置，Iterator 对象本质上是一个指针对象
2. 第一次调用指针对象的 next 方法，指针指向数据结构的第一个成员
3. 第二次调用指针对象的 next 方法，指针指向数据结构的第二个成员
4. ...
5. 一直调用该指针对象的 next 方法，直到数据结构的结束位置

每次调用 next 都会返回数据结构当前成员的信息：一个包含 value 和 done 两个属性的对象，value 属性是当前成员的值，done 属性是一个布尔值，表示遍历是否结束

模拟一个遍历器生成函数
    
    function makeIterator(array){
      let nextIndex = 0;
      return {
        next () {
          return nextIndex < array.length ?
            {value: array[nextIndex], done: false} :
            {value: array[nextIndex], done: true};
        }
      }
    }
    
 Iterator 并不会改变数据结构的行为，它只是把接口的规则添加到了数据结构上，在es6 中，数组原生具有 Iterator 接口，它可以被 for ... of 循环遍历，对象则没有。原因在于数组原生部署了 `Symbol.iterator` 属性。对象没有部署该属性。
 
 凡是部署了`Symbol.iterator` 属性的数据结构，就称为部署了 Iterator 接口，调用这个接口，就会翻一个遍历器对象。
 
 Iterator接口的目的，就是为所有数据结构提供一种统一的访问机制，即 `for ... of` 循环。当使用`for ... of`循环遍历某种数据结构时，该循环会自动寻找 Iterator 接口。
 
 默认的 Iterator 接口部署在数据结构的 `Symbol.iterator` 属性上，调用 `Symbol.iterator` 方法，就会得到当前数据结构默认的遍历器生成函数。
 
 es6中，有3种数据结构原生具备 Iterator 接口：*数组*，*类数组对象*，*Set和Map结构*
 
    let arr = ['a', 'b', 'c'];
    let iter = arr[Symbol.iterator](); // 原生具备Symbol.iterator接口(属性)，调用该方法，返回遍历器生成函数
    
    iter.next()   // {value: 'a', done: false}
    iter.next()   // {value: 'b', done: false}
    iter.next()   // {value: 'c', done: false}
    iter.next()   // {value: undefined, done: true}
    
上面3类数据结构不用自己写遍历器生成函数，`for ... of` 循环会自动遍历他们，其他数据结构的 Iterator 接口必须手动在 Symbol.iterator 属性上部署， 才会被 `for ... of`循环遍历。对象之所以没有部署 Iterator 接口是因为对象是一个无序结构，要先遍历哪个属性，后遍历哪个属性需要开发者自己指定。

    class RangeIterator(){
      constructor(start, stop){
        this.value = start;
        this.stop = stop;
      }
      
      [Symbol.iterator] () {
        return this;
      }
      
      next () {
        var value = this.value;
        if (value < this.stop) {
          this.value ++;
          return {value: value, done: false}
        } else {
          return {value: undefined, done: true}
        }
      }
    }
    
    function range (start, stop) {
      return new RangeIterator(start, stop);
    }
    
    for (var value of range(0, 3)){
      console.log(value);
    }
    
上面的代码实现部署一个 Iterator 接口，Symbol.iterator 对应一个函数，调用后返回当前对象的遍历器对象。

### 调用Iterator 接口的场合

除了使用 `for ... of` 循环遍历会调用Iterator 接口，以下几个场合也会默认调用

#### 解构赋值

对数组和Set解构进行解构赋值的时候，会默认调用Symbol.iterator 方法

    let set = new Set().add('a').add('b').add('c');

    let = [x, y] = set;  // 'x' = 'a', 'y' = 'b'

#### 扩展运算符

扩展运算符(...) 也会调用默认的 Iterator 接口

    var str = 'hello';
    [...str]  // ['h', 'e', 'l', 'l', 'o']
    
    let arr = ['b', 'c'];
    ['a', [...arr], 'd']  // ['a', 'b', 'c', 'd']
    
只要某种数据结构部署了Iterator 接口，就可以使用扩展运算符将其转化为数组。 `let arr = [...iterator]`


### yield*

yield* 后面跟的是一个可遍历的结构，它会调用该结构的Iterator 接口。

    let generator = function *(){
      yield 1;
      yield* [2, 3, 4];
      yield 5;
    };
    
    var iterator = generator();
    
    iterator.next()  // {value: 1, done: false}
    iterator.next()  // {value: 2, done: false}
    iterator.next()  // {value: 3, done: false}
    iterator.next()  // {value: 4, done: false}
    iterator.next()  // {value: 5, done: false}
    iterator.next()  // {value: undefined, done: true}
    
#### 其他场合

数组遍历会调用Iterator 接口，所以任何接受数组作为参数的场合都会调用Iterator接口

### Iterator 接口与 Generator 函数

用 Generator 函数实现 Symbol.iterator 方法

    var iterator = {};
    
    iterator[Symbol.iterator] = function *(){
      yield 1;
      yield 2;
      yield 3;
    };
    
    [...iterator]; // [1, 2, 3]
    
    // 下面的写法更加简单
    
    var obj = {
      * [Symbol.iterator] () {
        yield 'hello';
        yield 'world';
      }
    };
    
    for(let x of obj){
      console.log(x);
    }
    // x
    // y
    
用Generator 函数 yield 语句给出每一步的返回值

### 完了

    
 

    