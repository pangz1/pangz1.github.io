---
layout: post
title: "mongodb 基础知识"
date: 2016-02-04 08:00:16 +800
categories: mongodb
---

mongodb的一些基本知识，包括文档，集合的基本概念，mongodb的启动和配置以及如何选择数据库
文档的操作：包括插入、查询、删除数据，使用修改器对数据进行更新

### 文档
文档是一个键值对的有序集,一个jvascript对象。

    {“greeting”:"hello world"}

### 集合
集合是一组文档，如果文档相当于关系型数据库中的一行，集合就是关系型数据库中的一张表

### 子集合
组织集合使用 '.' 分隔不同命名空间的子集合。

例如diascubes下的产品是
diascubes.products，用户是 diascubes.users。

如果对产品进行细分，还可以这样：diascubes.products.cubes表示所有的魔方产品的集合。

### 启动Mongodb

先创建一个启动的配置文件:

mongod.conf

写入以下内容：

    port = 8888 
    dbpath = data
    logpath = log/mongod.log
    fork = true

指定启动时使用该文件的配置

    mongod -f conf/mongod.conf
    
上面的配置制定了端口号，数据存放地址，日志文件，fork表示是否开启子进程

### 运行 mongo shell  

    mongo

mongodb会启动一个本地的server，监听8888端口，如果该端口被占用，则启动失败

默认会连接 test 数据库，并将数据库连接复制给变量 db。 这个变量是通过shell 访问 mongodb 的主要入口点

查看 db 当前指向哪个数据库，可以使用 db 命令

    >db
    test
    
使用 use 命令选择数据库

    >use diascubes
    switch to db diascubes
    
查看 db 指向哪个数据库

    >db
    diascubes
    
通过 db.products 来访问产品集合


### 创建

    > item = {
        "name": "MoYu xxxx",
        "brand": "MoYu",
        "color": "white",
        "price": "$32.00"
    }

编辑一个文档，使用 insert 方法将其插入到 products 集合中去

    db.products.insert(item);

看是是否插入成功

    > db.products.findOne()
    {
        "_id": ObjectId("56b36b5de80119c7791914c6"),
        "name": "MoYu xxxx",
        "brand": "MoYu",
        "color": "white",
        "price": "$32.00"
    }
    
### 批量插入

批量插入使用 batchInsert, 用法与 insert 类似，接受一个文档数组作为参数

    > db.foo.batchInsert([{"id": 1}, {"id":2}, {"id": 3}])

一次插入多个文档效率会高很多

### 读取

find 和 findOne 方法用于查询集合中的文档，findOne 只查看一条，find 一次最多查看20条

可以传入一个查询文档作为限制条件

    > db.products.find({"brand": "MoYu"})
    
这条命令会查询出所有 魔域品牌的魔方

### 更新

update 最少接受两个参数，待更新的文档，新的文档

update 常规更新是用新的文档文档完全替换掉旧的文档，适用于大规模迁移的情况


### 查询

find 制定要查询的键值对作为约束条件

    > db.users.find({"age": 27})

可以指定多个键值对，多个键值对是 '&&' 操作

#### 制定需要返回的键

通过 find 的第二个参数来指定需要返回的键

比如只要返回 username 和 email，可以使用如下方式

    > db.users.find({}, {"username": 1, "email": 1})

这样只会返回 username email 和 默认都会返回的 _id 

如果不想返回 _id， 还可以这样

    > db.users.find({}, {"username": 1, "email": 1, "_id": 0})
    
#### 查询条件

"$lt", "$lte", "$gt", "$gte" 分别代表 "<", "<=", ">", ">="

查询年龄在 18~30岁之间的用户

    > db.users.find({"age": {"$gt": 18, "$lt": 30}})
    
#### OR查询

有两种实现OR查询的方法，$in， $or

用 $in 实现单键多个值中的 OR 查询

    > db.users.find({"name": {"$in": ["walle", "eva", "tom"]}})
    
这会查找出 name 为 walle，或者 eva 或者 tom 的用户

$in 可以指定多各种类型的条件和值

用 $or 实现多建的 OR 查询

    > db.users.find({"$or": {"name": "walle"}, {"age": 29}})
    
还可以和 $in 组合

    > db.users.find({"or": {"name": {"$in": ["walle", "eva", "tom"]}}, {"age": 29}})

#### $not 查询

用来查询与特定模式不匹配的文档

### 使用修改器对文档进行局部更新

#### $set 修改器

$set 用来指定一个字段的值，如果这个字段不存在就创建它。
    
    > db.products.findOne()
    {
        "_id" : ObjectId("56b43587e48157aa97a9ed79"),
        "id" : "1",
        "brand" : "ShengShou",
        "itemNo" : "7080A-1",
        "itemName" : "ShengShou 2x2x2 with matte stick",
        "color" : "black,white"
    }

下面为其添加一个包装信息

    > db.products.update({"id": "1"}, {"$set": {"package": "color box"}})

之后文档就有 package 信息了

    > db.products.findOne()
    {
        "_id" : ObjectId("56b43587e48157aa97a9ed79"),
        "id" : "1",
        "brand" : "ShengShou",
        "itemNo" : "7080A-1",
        "itemName" : "ShengShou 2x2x2 with matte stick",
        "color" : "black,white",
        "package": "color box"
    }
    
修改 package 信息

    > db.products.update({"id": "1"}, {"$set": {"package": "plastic box"}})
    
删除 package 信息

    > db.product.update({"id": "1"}, {"$unset": {"package": 1}})
    
#### $inc 修改器

$inc 用来增加已有键的值，如果该键不存在就创建一个

    > db.products.update({"id": 1}, {"$inc": {"storage": 50}})
    
为产品添加一个库存信息，下次库存增加100个

    > db.products.update({"id": 1}, {"$inc": {"storage": 100}})
    
    > db.products.getOne()
    {
        "_id" : ObjectId("56b43587e48157aa97a9ed79"),
        "id" : "1",
        "brand" : "ShengShou",
        "itemNo" : "7080A-1",
        "itemName" : "ShengShou 2x2x2 with matte stick",
        "color" : "black,white",
        "package": "color box",
        "storage": 150
    }

$inc 修改的键的值必须为数值类型，否则会出现错误

### 数组修改器

$push 会向已有的数组末尾添加一个元素，要是没有就创建一个新的数组

    > db.foo.update({"id": 1}, {"$push": {"contacts": {"email": "walle@gmail.com"}}})

向联系方式数组中添加了一条邮箱信息
    
也可以 添加复杂嵌套的文档

配合 $each 子操作符来进行复杂的数组操作

    > db.foo.update({"id": 1}, {"$push": {"$each": {"names": ["eva", "walle", "diascubes"]}}})

    > db.foo.findOne()
    {
        "id": 1,
        "names": ["eva", "walle", "diascubes"]
    }
    
还有 $slice 子修改器来防止数组超出最大长度， $sort 对数组中的对象进行排序， 具体查阅相关文档

#### 将数组作为数据集使用

$ne 配合 $push 使用，避免插入重复的值

    > db.papers.update({"author": {"$ne": "Richie"}}, {"$push": {"author": "Richie"}})

如果 Richie 不在作者列表中，就添加进去

$addToSet 

    > db.papers.update({"title": "111"}, {"$addToSet": {"author": {"$each":["hah, heh"]}}})    

用 $addToSet 插入多条数据到 author 列表中， 列表中已经存在的不会重复插入

#### 删除元素

$pop 从数组的两端删除一个元素 

    > {"$pop": {"key": 1}}

从数组尾部删除一个元素

    > {"$pop": {"key": -1}}
    
从数组头部删除一个元素

$pull 基于特定条件删除

    > db.foo.insert({"names": ["walle", "eva", "tom"]})
    > db.foo.update({}，{"$pull": {”names“: "walle"}})

walle 会从 names 数组中被移除掉

### 删除

使用 remove 可将文档从数据库中永久删除， 如果没有使用参数，会报错

    > db.products.remove({"name": "MoYu xxxx"})
    
这条数据就被永久的删除了

如果要删除整个集合，直接使用 drop

    > db.products.drop()
    
### upsert（update的第三个参数）

如果没有找到符合更新条件的文档，就会以这个条件和更新文档为基础创建一个新的文档，否则，正常更新。

比如，记录网站访问次数，通过url查询，如果存在就增加访问次数，否则就新建一个文档

    > db.site.update({'url': '/blog'}, {'$inc': {'pageviews': 1}}, true);
    
### $setOnInsert，只在创建时赋值，之后不再更新

比如创建时间这个字段，只需要创建的时候赋值，后面无需对其进行修改，就可以使用$setOnInsert

    > db.users.update({}, {"$setOnInsert": {"createTime": new Date()}}, true)
    
### save函数

save是一个shell函数，如果文档不存在就会创建，否则就更新该文档，它只有一个参数，就是文档。如果该文档有_id键就会执行upsert，否则就会调用insert。

    > var x = db.foo.findOne()
    > x.num = 42
    > db.foo.save(x)
    
### 更新多个文档

update默认只更新第一个匹配的文档，要更新所有匹配到的文档，可以将update的第四个参数设置为true，只能使用 $set 修改器

    > db.users.update({'birthday': '10/13/1988'}, {$set: {'gift': 'Happy birthday'}}, false, true)

要想知道更新了多少个文档，可以运行 getLastError 命令 （返回最后一次操作的相关信息）

    > db.runCommand({getLastError: 1})
    {
        "err": 1,
        "updatedExisting": true,
        "n": 5,
        "ok": true
    }
    
n:5 说明更新了5条，updatedExisting:true 说明是对已有文档进行更新
    
### 返回被更新的文档
    


